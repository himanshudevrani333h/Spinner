{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Himanshu\\\\Documents\\\\finalspinner\\\\src\\\\components\\\\Wheel.tsx\",\n    _s = $RefreshSig$();\n\nimport { Wheel } from \"react-custom-roulette\";\nimport { useState } from \"react\";\nimport * as Styled from \"./style\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Wheels = () => {\n  _s();\n\n  const data = [{\n    option: \"$0\",\n    style: {\n      backgroundColor: \"#e84118\",\n      textColor: \"white\"\n    }\n  }, {\n    option: \"$120\",\n    style: {\n      backgroundColor: \"#0097e6\",\n      textColor: \"white\"\n    }\n  }, {\n    option: \"$38\",\n    style: {\n      backgroundColor: \"#9c88ff\",\n      textColor: \"white\"\n    }\n  }, {\n    option: \"$45\",\n    style: {\n      backgroundColor: \"#f368e0\",\n      textColor: \"white\"\n    }\n  }, {\n    option: \"$51\",\n    style: {\n      backgroundColor: \"#ff9f43\",\n      textColor: \"white\"\n    }\n  }, {\n    option: \"$65\",\n    style: {\n      backgroundColor: \"#1dd1a1\",\n      textColor: \"white\"\n    }\n  }, {\n    option: \"$7k\",\n    style: {\n      backgroundColor: \"#ee5253\",\n      textColor: \"white\"\n    }\n  }, {\n    option: \"$800\",\n    style: {\n      backgroundColor: \"#341f97\",\n      textColor: \"white\"\n    }\n  }];\n  const [x, sx] = useState(false);\n  const [result, setResult] = useState(\"\");\n  const [showResult, setShowResult] = useState(\"\");\n  const [spintext, setSpinText] = useState(\"SPIN\");\n\n  function stopSpin() {\n    sx(false);\n    setShowResult(data[result].option);\n    setSpinText(\"SPIN\");\n  }\n\n  function getResult() {\n    const res = Math.floor(Math.random() * data.length);\n    console.log(data[res]);\n    setResult(res);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Styled.Header, {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"h1\",\n        children: \"Spinning\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"h2\",\n        children: \"Wheel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Styled.WheelContainer, {\n      children: [/*#__PURE__*/_jsxDEV(Wheel, {\n        prizeNumber: result,\n        mustStartSpinning: x,\n        data: data,\n        backgroundColors: [\"#3e3e3e\", \"#df3428\"],\n        textColors: [\"#ffffff\"],\n        onStopSpinning: () => stopSpin(),\n        radiusLineWidth: 2,\n        outerBorderWidth: 3,\n        innerRadius: 5,\n        radiusLineColor: '#39FF14',\n        outerBorderColor: '#faed27'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Styled.SpinBtn, {\n        onClick: () => {\n          setSpinText(\"\");\n          sx(true);\n          getResult();\n        },\n        children: spintext\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Styled.SpanTag, {\n        children: [\"You Won:   \", showResult]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Wheels, \"bSTP8PXpJCUhkkJ/DrhHeL4DUx0=\");\n\n_c = Wheels;\n\nvar _c;\n\n$RefreshReg$(_c, \"Wheels\");","map":{"version":3,"sources":["C:/Users/Himanshu/Documents/finalspinner/src/components/Wheel.tsx"],"names":["Wheel","useState","Styled","Wheels","data","option","style","backgroundColor","textColor","x","sx","result","setResult","showResult","setShowResult","spintext","setSpinText","stopSpin","getResult","res","Math","floor","random","length","console","log"],"mappings":"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","sourcesContent":["import { Wheel } from \"react-custom-roulette\";\r\nimport { useState } from \"react\";\r\nimport * as Styled from \"./style\";\r\n\r\nexport const Wheels = () => {\r\n  const data = [\r\n    { option: \"$0\", style: { backgroundColor: \"#e84118\", textColor: \"white\" } },\r\n    { option: \"$120\", style: { backgroundColor: \"#0097e6\", textColor: \"white\" } },\r\n    { option: \"$38\", style: { backgroundColor: \"#9c88ff\", textColor: \"white\" } },\r\n    { option: \"$45\", style: { backgroundColor: \"#f368e0\", textColor: \"white\" } },\r\n    { option: \"$51\", style: { backgroundColor: \"#ff9f43\", textColor: \"white\" } },\r\n    { option: \"$65\", style: { backgroundColor: \"#1dd1a1\", textColor: \"white\" } },\r\n    { option: \"$7k\", style: { backgroundColor: \"#ee5253\", textColor: \"white\" } },\r\n    { option: \"$800\", style: { backgroundColor: \"#341f97\", textColor: \"white\" } },\r\n  ];\r\n  const [x, sx] = useState<boolean>(false);\r\n  const [result, setResult] = useState<any>(\"\");\r\n  const [showResult, setShowResult] = useState<any>(\"\");\r\n  const [spintext, setSpinText] = useState<string>(\"SPIN\");\r\n  function stopSpin() {\r\n    sx(false);\r\n    setShowResult(data[result].option);\r\n    setSpinText(\"SPIN\");\r\n  }\r\n\r\n  function getResult() {\r\n    const res = Math.floor(Math.random() * data.length);\r\n    console.log(data[res]);\r\n    setResult(res);\r\n   \r\n  }\r\n  return (\r\n    <>\r\n      <Styled.Header>\r\n        <span className=\"h1\">Spinning</span>\r\n        <br></br>\r\n        <span className=\"h2\">Wheel</span>\r\n      </Styled.Header>\r\n      <Styled.WheelContainer>\r\n        <Wheel\r\n          prizeNumber={result}\r\n          mustStartSpinning={x}\r\n          data={data}\r\n          backgroundColors={[\"#3e3e3e\", \"#df3428\"]}\r\n          textColors={[\"#ffffff\"]}\r\n          onStopSpinning={() => stopSpin()}\r\n          radiusLineWidth={2}\r\n          outerBorderWidth={3}\r\n          innerRadius={5}\r\n          radiusLineColor={'#39FF14'}\r\n          outerBorderColor={'#faed27'}\r\n        />\r\n        <Styled.SpinBtn\r\n          onClick={() => {\r\n            setSpinText(\"\");\r\n            sx(true);\r\n            getResult();\r\n          }}\r\n        >\r\n          {spintext}\r\n        </Styled.SpinBtn>\r\n        <Styled.SpanTag>You Won:   {showResult}</Styled.SpanTag>\r\n      </Styled.WheelContainer>\r\n\r\n     \r\n    </>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}